#!/usr/bin/env bash

#
# Setup.
#

VERSION="2.1.0"
UP=$'\033[A'      # $字符用于转义
DOWN=$'\033[B'
N_PREFIX=${N_PREFIX-/usr/local}
BASE_VERSIONS_DIR=$N_PREFIX/n/versions   # !!!

#
# Log <type> <msg>
#

log() {
  printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" $1 $2
}

#
# Exit with the given <msg ...>
#

abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

#
# All Bin(node/io) configurations
#

BINS=("node"
      "io")
MIRROR=(${NODE_MIRROR-https://nodejs.org/dist/}
        ${IO_MIRROR-https://iojs.org/dist/})
BIN_NAME=("node"
          "iojs")
VERSIONS_DIR=($BASE_VERSIONS_DIR/node
              $BASE_VERSIONS_DIR/io)

## 不从官网，从自定义的地址下载
if [ -n "$PROJECT_NAME" ]; then
  BINS+=($PROJECT_NAME)
  BIN_NAME+=($PROJECT_NAME)
  if [ -z "$PROJECT_URL" ]; then
    abort "Must specify PROJECT_URL when supplying PROJECT_NAME"  # 会退出程序
  fi
  MIRROR+=(${PROJECT_URL})
  VERSIONS_DIR+=($BASE_VERSIONS_DIR/$PROJECT_NAME)
fi

#
# Ensure we have curl or wget support.
#

CURL_PARAMS=( "-L"
              "-#")

WGET_PARAMS=( "--no-check-certificate"
              "-q"
              "-O-")

## 如果访问http需要认证，则在curl、wget中添加上用户名和密码
if [ -n "$HTTP_USER" ];then
  if [ -z "$HTTP_PASSWORD" ]; then
    abort "Must specify HTTP_PASSWORD when supplying HTTP_USER"
  fi
  CURL_PARAMS+=("-u $HTTP_USER:$HTTP_PASSWORD")
  WGET_PARAMS+=("--http-password=$HTTP_PASSWORD"
                "--http-user=$HTTP_USER")
elif [ -n "$HTTP_PASSWORD" ]; then
  abort "Must specify HTTP_USER when supplying HTTP_PASSWORD"
fi

GET=

## 有curl命令，则用curl。没有curl、有wget时，用wget。两者都没有，则报错，并退出。
# wget support
command -v wget > /dev/null && GET="wget ${WGET_PARAMS[@]}"

command -v curl > /dev/null && GET="curl ${CURL_PARAMS[@]}" && QUIET=false

test -z "$GET" && abort "curl or wget required"

#
# State
#

DEFAULT=0  # 对应BINS数组，用索引位置表示，0是node，1是io。
QUIET=true
ACTIVATE=true
ARCH=

#
# set_default <BIN_NAME>
# 使用方法：
#   例1： set_default io
#   例2： set_default node
#


set_default() {
  for (( i=0 ; i<${#BINS[@]} ; i++ )); do
    if test ${BINS[$i]} = $1; then
      DEFAULT=$i
    fi
  done
}


## 判断这几个目录是否存在，若不存在则创建之
for dir in ${VERSIONS_DIR[@]}; do
  test -d $dir || mkdir -p $dir
done

#
# set_arch <arch> to override $(uname -a)
#

set_arch() {
  if test ! -z $1; then
    ARCH=$1
  else
    abort "missing -a|--arch value"
  fi
}

#
# Functions used when showing versions installed
#


enter_fullscreen() {
  tput smcup    # Save the display
  stty -echo    # 不回显输入的字符
}

leave_fullscreen() {
  tput rmcup    # Restore the display
  stty echo     # 回显输入的字符
}

## 处理 ctrl + c，SIGINT信号，中断信号
handle_sigint() {
  leave_fullscreen
  exit $?
}

## SIGTSTP是为了使进程暂停
handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$    # -s 是为了发送信号
}

#
# Output usage information.
#

display_help() {
  cat <<-EOF

  Usage: n [options/env] [COMMAND] [args]

  Environments:
    n [COMMAND] [args]            Uses default env (node)
    n io [COMMAND]                Sets env as io
    n project [COMMAND]           Uses custom env-variables to use non-official sources

  Commands:

    n                              Output versions installed
    n latest                       Install or activate the latest node release
    n -a x86 latest                As above but force 32 bit architecture
    n stable                       Install or activate the latest stable node release
    n <version>                    Install node <version>
    n use <version> [args ...]     Execute node <version> with [args ...]
    n bin <version>                Output bin path for <version>
    n rm <version ...>             Remove the given version(s)
    n --latest                     Output the latest node version available
    n --stable                     Output the latest stable node version available
    n ls                           Output the versions of node available

  (iojs):
    n io latest                    Install or activate the latest iojs release
    n io -a x86 latest             As above but force 32 bit architecture
    n io <version>                 Install iojs <version>
    n io use <version> [args ...]  Execute iojs <version> with [args ...]
    n io bin <version>             Output bin path for <version>
    n io rm <version ...>          Remove the given version(s)
    n io --latest                  Output the latest iojs version available
    n io ls                        Output the versions of iojs available

  Options:

    -V, --version   Output current version of n
    -h, --help      Display help information
    -q, --quiet     Disable curl output (if available)
    -d, --download  Download only
    -a, --arch      Override system architecture

  Aliases:

    which   bin
    use     as
    list    ls
    -       rm

EOF
}

err_no_installed_print_help() {
  printf "\n  \033[31mError: no installed version\033[0m\n"
  display_help
  exit 1
}

#
# Hide cursor.
#

hide_cursor() {
  printf "\e[?25l"
}

#
# Show cursor.
#

show_cursor() {
  printf "\e[?25h"
}

#
# Output version after selected.
# tail-n 1 ： 输出最后一行
# $selected 变量是在其他函数里赋值的

next_version_installed() {
  list_versions_installed | grep $selected -A 1 | tail -n 1
}

#
# Output version before selected.
#

prev_version_installed() {
  list_versions_installed | grep $selected -B 1 | head -n 1
}

#
# Output n version.
#

display_n_version() {
  echo $VERSION && exit 0
}

#
# Check for installed version, and populate $active
#

check_current_version() {
  command -v node &> /dev/null  # 判断是否有node命令，若有，退出码为0,否则为其他数字
  if test $? -eq 0; then
    local current=$(node --version)   # 结果可能是`v4.1.2`
    if [ -n "$PROJECT_VERSION_CHECK" ]; then
      current=$(node -p "$PROJECT_VERSION_CHECK || process.exit(1)" || node --version)
    fi
    current=${current#v}      # 去除最前面的`v`，只保留数字和点。例如原先current为`v4.1.2`，现在是`4.1.2`
    
    ## 下面的for循环是用diff比较n下载的哪个node与现在使用的node是同一个。若是同一个，diff的退出码是0（真）
    ## 有意思的是C语言中非0是真，0是假 。
    for bin in ${BINS[@]}; do
      if diff &> /dev/null \
        $BASE_VERSIONS_DIR/$bin/$current/bin/node \
        $(which node) ; then
        active=$bin/$current  # active就摆在这儿了？？？ 此时，active变量在整个脚本中都能访问了
      fi
    done
  fi
}

#
# Check the operation is supported for io.
# DEFAULT的默认值是0,代表node；1是io

check_io_supported() {
  test $DEFAULT -eq 1 && abort "$1 not supported for io.js"
}

#
# Display sorted versions directories paths.
# 找到所有的版本，并排序

versions_paths() {
  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \
    | sed 's|'$BASE_VERSIONS_DIR'/||g' \
    | egrep "/[0-9]+\.[0-9]+\.[0-9]+$" \
    | sort -k 1 -k 2,2n -k 3,3n -t .
}

#
# Display installed versions with <selected>
# `versions_paths`是本脚本中定义的一个函数
#

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    if test "$version" = "$selected"; then
      printf "  \033[36mο\033[0m $version\033[0m\n"   # 字体颜色变亮，且前面有一个偏绿色的o
    else
      printf "    \033[90m$version\033[0m\n"          # 字体颜色变暗
    fi
  done
  echo
}

#
# List installed versions.
# `versions_paths`是本脚本中定义的一个函数
# 

list_versions_installed() {
  for version in $(versions_paths); do
    echo $version
  done
}

#
# Display current node --version and others installed.
#

display_versions() {
  enter_fullscreen
  check_current_version
  clear
  display_versions_with_selected $active

  ## 为信号绑定处理函数
  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  ## 每一次整个的刷新屏幕
  while true; do
    read -n 3 c   # 读取3个字符放入变量c中
    case "$c" in
      $UP)        # 上方向键
        clear
        display_versions_with_selected $(prev_version_installed)
        ;;        # 相当于break
      $DOWN)      # 下方向键
        clear
        display_versions_with_selected $(next_version_installed)
        ;;
      *)          # 默认
        activate $selected
        leave_fullscreen  
        exit
        ;;
    esac
  done
}

#
# Move up a line and erase.
#

erase_line() {
  printf "\033[1A\033[2K"
}

#
# Check if the HEAD response of <url> is 200.
# grep的退出状态就是is_ok的退出状态。如果退出状态为0，则响应的是200,否则不是
#

is_ok() {
  if command -v curl > /dev/null; then
    $GET -Is $1 | head -n 1 | grep 200 > /dev/null
  else
    $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null
  fi
}

#
# Determine tarball url for <version>
# 生成url
#

tarball_url() {
  local version=$1
  local uname="$(uname -a)"
  local arch=x86
  local os=

  # from nave(1)
  case "$uname" in
    Linux*) os=linux ;;
    Darwin*) os=darwin ;;
    SunOS*) os=sunos ;;
  esac

  case "$uname" in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=armv6l ;;
    *armv7l*) arch=armv7l ;;
  esac

  ## -a 即 and。
  if [ ${arch} = "armv6l" -a ${BIN_NAME[$DEFAULT]} = node ]; then
    local semver=${version//./ }
    local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')
    [[ $major -eq "" && $minor -lt 12 ]] && arch=arm-pi
  fi

  [ ! -z $ARCH ] && arch=$ARCH    # 如果ARCH变量不为空，则将$ARCH赋值给arch

  echo "${MIRROR[$DEFAULT]}v${version}/${BIN_NAME[$DEFAULT]}-v${version}-${os}-${arch}.tar.gz"   # 生成url

}

#
# Disable PaX mprotect for <binary>
#

disable_pax_mprotect() {
  test -z $1 && abort "binary required"
  local binary=$1

  # try to disable mprotect via XATTR_PAX header
  local PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl-ng 2>&1)
  local PAXCTL_ERROR=1
  if [ -x "$PAXCTL" ]; then   # 存在且可执行
    $PAXCTL -l && $PAXCTL -m "$binary" >/dev/null 2>&1
    PAXCTL_ERROR="$?"
  fi

  # try to disable mprotect via PT_PAX header
  if [ $PAXCTL_ERROR != 0 ]; then
    PAXCTL=$(PATH="/sbin:/usr/sbin:$PATH" which paxctl 2>&1)
    if [ -x "$PAXCTL" ]; then
      $PAXCTL -Cm "$binary" >/dev/null 2>&1
    fi
  fi
}

#
# Activate <version>
# 激活某一版本的node。
#

activate() {
  local version=$1
  check_current_version
  if test "$version" != "$active"; then
    local dir=$BASE_VERSIONS_DIR/$version
    for subdir in bin lib include share; do
      if test -L "$N_PREFIX/$subdir"; then
        ## -R：递归copy； -f：目标已有，则覆盖
        find "$dir/$subdir" -mindepth 1 -maxdepth 1 -exec cp -fR "{}" "$N_PREFIX/$subdir" \;  
      else
        cp -fR "$dir/$subdir" $N_PREFIX
      fi
    done
    disable_pax_mprotect "$N_PREFIX/bin/node"  # /usr/local/bin/node
  fi
}

#
# Install latest version.
#

install_latest() {
  install $(display_latest_version)
}

#
# Install latest stable version.
#

install_stable() {
  check_io_supported "stable"
  install $(display_latest_stable_version)
}

#
# Install <version>
#

install() {
  local version=${1#v}   # 把最前面的v去掉，若没有就什么都不做

  local dots=$(echo $version | sed 's/[^.]*//g')  # 把`.`提取出来，其他字符替换为空

  # 若只有一个点，则把以这个不全的version开头的所有version都拿出来，找到最新的版本
  if test ${#dots} -eq 1; then                    
    version=$($GET 2> /dev/null ${MIRROR[DEFAULT]} \
      | egrep "</a>" \
      | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | egrep -v '^0\.[0-7]\.' \
      | egrep -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | egrep ^$version \
      | tail -n1)

    test $version || abort "invalid version ${1#v}"   # 若没找到合要求的version，则报错，并退出
  fi

  local dir=${VERSIONS_DIR[$DEFAULT]}/$version

  ## 如果该版本已存在，并符合另外两个条件，则激活它，然后退出
  if test -d $dir; then
    if [[ ! -e $dir/n.lock ]] ; then   # 若n.lock存在，意味着正在安装该版本（其他地方正在运行n命令安装该版本）
      if $ACTIVATE ; then
        activate ${BINS[$DEFAULT]}/$version
      fi
      exit
    fi
  fi

  echo
  log install ${BINS[$DEFAULT]}-v$version   # 打印日志

  local url=$(tarball_url $version)
  is_ok $url || abort "invalid version $version"   # 使用wget或者curl看看这个url是否有效，若无效则退出

  log mkdir $dir
  mkdir -p $dir
  if [ $? -ne 0 ] ; then
    abort "sudo required"
  else
    touch $dir/n.lock       # 表示正在安装
  fi

  cd $dir 

  log fetch $url            # 打印日志
  $GET $url | tar -zx --strip-components=1   # 解压时去掉每个文件的第一层路径
  [ $QUIET == false ] && erase_line
  rm -f $dir/n.lock

  disable_pax_mprotect bin/node

  if $ACTIVATE ; then
    activate ${BINS[$DEFAULT]}/$version
    log installed $(node --version)
  fi
  echo
}

#
# Set curl to quiet (silent) mode.
#

set_quiet() {
  command -v curl > /dev/null && GET="$GET -s" && QUIET=true
}

#
# Remove <version ...>
# 可用于删除多个版本
# 

remove_versions() {
  test -z $1 && abort "version(s) required"
  check_current_version
  while test $# -ne 0; do
    local version=${1#v}
    [ "${BINS[$DEFAULT]}/$version" == "$active" ] && abort "cannot remove currently active version ($active)"
    rm -rf ${VERSIONS_DIR[$DEFAULT]}/$version
    shift  # 默认删除第1个参数，也可以指定删除前几个参数
  done
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node
  if test -f $bin; then
    printf "$bin \n"
  else
    abort "$1 is not installed"
  fi
}

#
# Execute the given <version> of node with [args ...]
#

execute_with_version() {
  test -z $1 && abort "version required"
  local version=${1#v}
  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node

  shift # remove version

  if test -f $bin; then
    $bin "$@"
  else
    abort "$version is not installed"
  fi
}

#
# Display the latest release version.
#

display_latest_version() {
  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | egrep -v '^0\.[0-7]\.' \
    | egrep -v '^0\.8\.[0-5]$' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the latest stable release version.
#

display_latest_stable_version() {
  check_io_supported "--stable"
  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

#
# Display the versions available.
#

display_remote_versions() {
  check_current_version
  local versions=""
  versions=$($GET 2> /dev/null ${MIRROR[$DEFAULT]} \
    | egrep "</a>" \
    | egrep -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | awk '{ print "  " $1 }')

  echo
  local bin=${BINS[$DEFAULT]}
  for v in $versions; do
    if test "$active" = "$bin/$v"; then
      printf "  \033[36mο\033[0m $v \033[0m\n"
    else
      if test -d $BASE_VERSIONS_DIR/$bin/$v; then
        printf "    $v \033[0m\n"
      else
        printf "    \033[90m$v\033[0m\n"
      fi
    fi
  done
  echo
}

#
# Handle arguments.
#

if test $# -eq 0; then    # 参数个数为0
  test -z "$(versions_paths)" && err_no_installed_print_help   # versions_paths是函数
  display_versions
else
  while test $# -ne 0; do
    case $1 in
      -V|--version) display_n_version ;;    # display_n_version函数里有exit
      -h|--help|help) display_help; exit ;;
      -q|--quiet) set_quiet ;;
      -d|--download) ACTIVATE=false ;;
      --latest) display_latest_version; exit ;;
      --stable) display_latest_stable_version; exit ;;
      io) set_default $1 ;; # set bin and continue
      project) DEFAULT=2 ;;
      -a|--arch) shift; set_arch $1;; # set arch and continue
      bin|which) display_bin_path_for_version $2; exit ;;
      as|use) shift; execute_with_version $@; exit ;;
      rm|-) shift; remove_versions $@; exit ;;
      latest) install_latest; exit ;;
      stable) install_stable; exit ;;
      ls|list) display_remote_versions; exit ;;
      *) install $1; exit ;;
    esac
    shift
  done
fi
